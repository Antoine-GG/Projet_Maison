
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fc  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  00001281  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b3  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e2  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14SPI_MasterInitv>:
		transmitByte(myString[i]);
		i++;
		
	}
	
}
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 62       	ori	r24, 0x28	; 40
  84:	84 b9       	out	0x04, r24	; 4
  86:	84 b1       	in	r24, 0x04	; 4
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	84 b9       	out	0x04, r24	; 4
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	84 b9       	out	0x04, r24	; 4
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	82 65       	ori	r24, 0x52	; 82
  96:	8c bd       	out	0x2c, r24	; 44
  98:	08 95       	ret

0000009a <_Z18SPI_MasterTransmitc>:
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <_Z18SPI_MasterTransmitc+0x2>
  a2:	08 95       	ret

000000a4 <_Z9initUSARTv>:
  a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  a8:	83 e3       	ldi	r24, 0x33	; 51
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	80 83       	st	Z, r24
  b8:	e2 ec       	ldi	r30, 0xC2	; 194
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <main>:

int main(void)
{   
	uint8_t donnees;
	/*Bouton Poussoir sur PC0, Activer résistance de Rappel*/
	PORTD |=(1<<PD2);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8b b9       	out	0x0b, r24	; 11
	PORTD |=(1<<PD3);
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8b b9       	out	0x0b, r24	; 11
	SPI_MasterInit();									//Initialisation SPI Master
  d0:	0e 94 40 00 	call	0x80	; 0x80 <_Z14SPI_MasterInitv>
	PORTB|=(1<<PB2);									//SS du SLAVE1 = 1
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	85 b9       	out	0x05, r24	; 5
	PORTB|=(1<<PB1);									//SS dud SLAVE2 =1
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	85 b9       	out	0x05, r24	; 5
	/*Set LED pin (for example, PB1) as an output*/
	DDRD |= (1 << PD4);
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	8a b9       	out	0x0a, r24	; 10
	/*Initialize UART*/
	initUSART();
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9initUSARTv>
    while (1)
    { 
		/*lire l'etat du bouton poussoir*/
		/*donnees pour la lumière*/
		if (bit_is_clear(PIND,PD2))
  ea:	4a 99       	sbic	0x09, 2	; 9
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x2e>
		donnees=0x01;									//si bouton appuyé envoyé 01
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <main+0x30>
		else
		donnees=0x00;									//si non envoyé 00
  f2:	80 e0       	ldi	r24, 0x00	; 0
		/*controle du SLAVE1*/
		PORTB &= ~(1<<PB2);								//Activé Slave 1 SS=0
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	9b 7f       	andi	r25, 0xFB	; 251
  f8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	9d e0       	ldi	r25, 0x0D	; 13
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x38>
 100:	00 00       	nop
		_delay_us(5);
		SPI_MasterTransmit(donnees);					//Transmettre la donnee
 102:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z18SPI_MasterTransmitc>
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x44>
 10c:	00 00       	nop
		_delay_us(5);
		PORTB|=(1<<PB2);								//Désactivé Slave1 SS=1
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	84 60       	ori	r24, 0x04	; 4
 112:	85 b9       	out	0x05, r24	; 5
		/*controle du SLAVE2*/
		if (bit_is_clear(PIND,PD3))
 114:	4b 99       	sbic	0x09, 3	; 9
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x58>
		{
			donnees=0x01;								//si bouton appuyé envoyé 01
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x5a>
			
		}
		else
		{
			donnees=0x00;								//si non envoyé 00
 11c:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		PORTB &= ~(1<<PB1);								//Activé Slave2 SS=0
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	9d 7f       	andi	r25, 0xFD	; 253
 122:	95 b9       	out	0x05, r25	; 5
 124:	9d e0       	ldi	r25, 0x0D	; 13
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x62>
 12a:	00 00       	nop
		_delay_us(5);
		/*donnnes pour le verrou*/
		SPI_MasterTransmit(donnees);					//Transmettre la donnee
 12c:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z18SPI_MasterTransmitc>
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x6e>
 136:	00 00       	nop
		_delay_us(5);
		PORTB|=(1<<PB1);								//Désactivé Slave2 SS=1
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	85 b9       	out	0x05, r24	; 5
	PORTB|=(1<<PB1);									//SS dud SLAVE2 =1
	/*Set LED pin (for example, PB1) as an output*/
	DDRD |= (1 << PD4);
	/*Initialize UART*/
	initUSART();
    while (1)
 13e:	d5 cf       	rjmp	.-86     	; 0xea <main+0x26>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
