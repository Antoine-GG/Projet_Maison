
ATmega32_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000880  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071f  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000466  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016c  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	int drapeau=0;
	int8_t count = 0;
	uint8_t valeur=0b00000000;
	
	PORTC|=(1<<PC0);//Resistance de Rappel activé pour le Bouton Poussoir
  80:	40 9a       	sbi	0x08, 0	; 8
	PORTC|=(1<<PC1);//Resistance de Rappel activé pour le Bouton Poussoir
  82:	41 9a       	sbi	0x08, 1	; 8
	PORTC|=(1<<PC2);//Resistance de Rappel activé pour le Bouton Poussoir
  84:	42 9a       	sbi	0x08, 2	; 8
	DDRD=0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a b9       	out	0x0a, r24	; 10
	I2C_Slave_Init(Slave_Address);
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Slave_Init>

#define Slave_Address			0x20

int main(void)
{
	int drapeau=0;
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
			{
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
  94:	01 e0       	ldi	r16, 0x01	; 1
  96:	10 e0       	ldi	r17, 0x00	; 0
					{   valeur=(PINC & 0b00000111);  //si PB0=0 -- valeur =0 si PB0=1 -- Valeur =1
						Ack_status = I2C_Slave_Transmit(valeur);	/* Send data byte */
				
					} while (Ack_status == 0);		/* Send until Acknowledgment is received */
				
					drapeau=0;//reset pour lire une autre donnée
  98:	e1 2c       	mov	r14, r1
  9a:	f1 2c       	mov	r15, r1
	I2C_Slave_Init(Slave_Address);
	
	
	while (1)
	{
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  9c:	0e 94 73 00 	call	0xe6	; 0xe6 <I2C_Slave_Listen>
  a0:	88 23       	and	r24, r24
  a2:	19 f0       	breq	.+6      	; 0xaa <main+0x2a>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	49 f0       	breq	.+18     	; 0xba <main+0x3a>
  a8:	f9 cf       	rjmp	.-14     	; 0x9c <main+0x1c>
			case 0://receive
			{
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
  aa:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Slave_Receive>
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
  ae:	85 32       	cpi	r24, 0x25	; 37
  b0:	81 f0       	breq	.+32     	; 0xd2 <main+0x52>
					PORTD=count;
  b2:	8b b9       	out	0x0b, r24	; 11
				} while (count != -1);			/* Receive until STOP/REPEATED START received */
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	c9 f7       	brne	.-14     	; 0xaa <main+0x2a>
  b8:	f1 cf       	rjmp	.-30     	; 0x9c <main+0x1c>
			}
			
			case 1://transmit
			{
				int8_t Ack_status;
		        if(drapeau==1){ //si bon code envoi l'état de PB0
  ba:	c1 30       	cpi	r28, 0x01	; 1
  bc:	d1 05       	cpc	r29, r1
  be:	71 f7       	brne	.-36     	; 0x9c <main+0x1c>
				do
					{   valeur=(PINC & 0b00000111);  //si PB0=0 -- valeur =0 si PB0=1 -- Valeur =1
  c0:	86 b1       	in	r24, 0x06	; 6
						Ack_status = I2C_Slave_Transmit(valeur);	/* Send data byte */
  c2:	87 70       	andi	r24, 0x07	; 7
  c4:	0e 94 8e 00 	call	0x11c	; 0x11c <I2C_Slave_Transmit>
				
					} while (Ack_status == 0);		/* Send until Acknowledgment is received */
  c8:	88 23       	and	r24, r24
  ca:	d1 f3       	breq	.-12     	; 0xc0 <main+0x40>
				
					drapeau=0;//reset pour lire une autre donnée
  cc:	ce 2d       	mov	r28, r14
  ce:	df 2d       	mov	r29, r15
  d0:	e5 cf       	rjmp	.-54     	; 0x9c <main+0x1c>
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
					PORTD=count;
  d2:	8b b9       	out	0x0b, r24	; 11
			{
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
  d4:	c0 2f       	mov	r28, r16
  d6:	d1 2f       	mov	r29, r17
  d8:	e8 cf       	rjmp	.-48     	; 0xaa <main+0x2a>

000000da <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
  da:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7fc0ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
  de:	84 ec       	ldi	r24, 0xC4	; 196
  e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
  e4:	08 95       	ret

000000e6 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
  e6:	ec eb       	ldi	r30, 0xBC	; 188
  e8:	f0 e0       	ldi	r31, 0x00	; 0
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
  ea:	a9 eb       	ldi	r26, 0xB9	; 185
  ec:	b0 e0       	ldi	r27, 0x00	; 0
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <I2C_Slave_Listen+0x8>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
  f4:	8c 91       	ld	r24, X
  f6:	98 2f       	mov	r25, r24
  f8:	98 7f       	andi	r25, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	80 36       	cpi	r24, 0x60	; 96
  fe:	41 f0       	breq	.+16     	; 0x110 <I2C_Slave_Listen+0x2a>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 100:	98 3a       	cpi	r25, 0xA8	; 168
 102:	41 f0       	breq	.+16     	; 0x114 <I2C_Slave_Listen+0x2e>
 104:	90 3b       	cpi	r25, 0xB0	; 176
 106:	41 f0       	breq	.+16     	; 0x118 <I2C_Slave_Listen+0x32>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 108:	80 37       	cpi	r24, 0x70	; 112
 10a:	89 f7       	brne	.-30     	; 0xee <I2C_Slave_Listen+0x8>
		return 2;								/* If yes then return 2 to indicate ack returned */
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
 118:	81 e0       	ldi	r24, 0x01	; 1
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
		else
		continue;								/* Else continue */
	}
}
 11a:	08 95       	ret

0000011c <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
 11c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
 120:	84 ec       	ldi	r24, 0xC4	; 196
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
 126:	ec eb       	ldi	r30, 0xBC	; 188
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	ec f7       	brge	.-6      	; 0x12a <I2C_Slave_Transmit+0xe>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 130:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 134:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 136:	80 3a       	cpi	r24, 0xA0	; 160
 138:	39 f4       	brne	.+14     	; 0x148 <I2C_Slave_Transmit+0x2c>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
 13a:	ec eb       	ldi	r30, 0xBC	; 188
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	80 83       	st	Z, r24
		return -1;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	08 95       	ret
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
 148:	88 3b       	cpi	r24, 0xB8	; 184
 14a:	69 f0       	breq	.+26     	; 0x166 <I2C_Slave_Transmit+0x4a>
		return 0;									/* If yes then return 0 */
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
 14c:	80 3c       	cpi	r24, 0xC0	; 192
 14e:	39 f4       	brne	.+14     	; 0x15e <I2C_Slave_Transmit+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
 150:	ec eb       	ldi	r30, 0xBC	; 188
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 83       	st	Z, r24
		return -2;
 15a:	8e ef       	ldi	r24, 0xFE	; 254
 15c:	08 95       	ret
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
 15e:	88 3c       	cpi	r24, 0xC8	; 200
 160:	21 f0       	breq	.+8      	; 0x16a <I2C_Slave_Transmit+0x4e>
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
 162:	8c ef       	ldi	r24, 0xFC	; 252
 164:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
		return -1;
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
		return 0;									/* If yes then return 0 */
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
		return -2;
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
 16a:	8d ef       	ldi	r24, 0xFD	; 253
	else										/* else return -4 */
	return -4;
}
 16c:	08 95       	ret

0000016e <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 16e:	84 ec       	ldi	r24, 0xC4	; 196
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	ec f7       	brge	.-6      	; 0x178 <I2C_Slave_Receive+0xa>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 17e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 182:	98 2f       	mov	r25, r24
 184:	98 7e       	andi	r25, 0xE8	; 232
 186:	90 38       	cpi	r25, 0x80	; 128
 188:	19 f4       	brne	.+6      	; 0x190 <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
 18a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 18e:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 190:	98 38       	cpi	r25, 0x88	; 136
 192:	19 f4       	brne	.+6      	; 0x19a <I2C_Slave_Receive+0x2c>
	return TWDR;								/* If yes then return received data */
 194:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 198:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	80 3a       	cpi	r24, 0xA0	; 160
 19e:	39 f4       	brne	.+14     	; 0x1ae <I2C_Slave_Receive+0x40>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	80 83       	st	Z, r24
		return -1;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 1ae:	8e ef       	ldi	r24, 0xFE	; 254
}
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
