
ATmega16_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a33  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000644  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f1  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ae  00000000  00000000  00002135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000024e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define Slave_Read_Address		0x21
#define	count					10

int main()
{
   DDRD =0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
   DDRC|=(1<<PC0)|(1<<PC1)|(1<<PC2);
  84:	87 b1       	in	r24, 0x07	; 7
  86:	87 60       	ori	r24, 0x07	; 7
  88:	87 b9       	out	0x07, r24	; 7
   PORTC &=~(1<<PC0);
  8a:	40 98       	cbi	0x08, 0	; 8
   PORTC &=~(1<<PC1);
  8c:	41 98       	cbi	0x08, 1	; 8
   PORTC &=~(1<<PC2);
  8e:	42 98       	cbi	0x08, 2	; 8
	char val;
	
	I2C_Init();								/* Initialize I2C */
  90:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_Init>
	

	while (1)
	{
	
		I2C_Start_Wait(Slave_Write_Address);/* Start I2C communication with SLA+W */
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_Start_Wait>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	97 e2       	ldi	r25, 0x27	; 39
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
		_delay_ms(5);
			
		I2C_Write(0x25);					/* Envoyer 0x25 code pour demander d'envoyer une données */
  a6:	85 e2       	ldi	r24, 0x25	; 37
  a8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <I2C_Write>
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	24 e3       	ldi	r18, 0x34	; 52
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	91 50       	subi	r25, 0x01	; 1
  b4:	20 40       	sbci	r18, 0x00	; 0
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
		_delay_ms(500);
		
	
		I2C_Repeated_Start(Slave_Read_Address);	/* Repeated Start I2C communication with SLA+R */
  be:	81 e2       	ldi	r24, 0x21	; 33
  c0:	0e 94 8e 00 	call	0x11c	; 0x11c <I2C_Repeated_Start>
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x48>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
		_delay_ms(5);
		
		val=I2C_Read_Nack(); /*lire la donnée (1 seule) et envoyer sur le port D   vérifier l'état de PD0 */
  d0:	0e 94 10 01 	call	0x220	; 0x220 <I2C_Read_Nack>
		
		if ((val & 0b00000001)==0b00000000)  PORTC &=~(1<<PC0); else PORTC |=(1<<PC0);
  d4:	80 fd       	sbrc	r24, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x5c>
  d8:	40 98       	cbi	0x08, 0	; 8
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x5e>
  dc:	40 9a       	sbi	0x08, 0	; 8
		if ((val & 0b00000010)==0b00000000)  PORTC &=~(1<<PC1); else PORTC |=(1<<PC1);
  de:	81 fd       	sbrc	r24, 1
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x66>
  e2:	41 98       	cbi	0x08, 1	; 8
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <main+0x68>
  e6:	41 9a       	sbi	0x08, 1	; 8
		if ((val & 0b00000100)==0b00000000)  PORTC &=~(1<<PC2); else PORTC |=(1<<PC2);
  e8:	82 fd       	sbrc	r24, 2
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x70>
  ec:	42 98       	cbi	0x08, 2	; 8
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x72>
  f0:	42 9a       	sbi	0x08, 2	; 8
  f2:	9f ef       	ldi	r25, 0xFF	; 255
  f4:	24 e3       	ldi	r18, 0x34	; 52
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	91 50       	subi	r25, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x78>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x82>
 102:	00 00       	nop
		_delay_ms(500);
		
		I2C_Stop();   /* Stop I2C */
 104:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Stop>
		
	};				
 108:	c5 cf       	rjmp	.-118    	; 0x94 <main+0x14>

0000010a <I2C_Init>:
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fc0b8>
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <I2C_Repeated_Start>:
 11c:	94 ea       	ldi	r25, 0xA4	; 164
 11e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	99 23       	and	r25, r25
 12a:	ec f7       	brge	.-6      	; 0x126 <I2C_Repeated_Start+0xa>
 12c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	90 31       	cpi	r25, 0x10	; 16
 134:	99 f4       	brne	.+38     	; 0x15c <I2C_Repeated_Start+0x40>
 136:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 140:	ec eb       	ldi	r30, 0xBC	; 188
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <I2C_Repeated_Start+0x28>
 14a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 34       	cpi	r24, 0x40	; 64
 152:	31 f0       	breq	.+12     	; 0x160 <I2C_Repeated_Start+0x44>
 154:	80 32       	cpi	r24, 0x20	; 32
 156:	31 f0       	breq	.+12     	; 0x164 <I2C_Repeated_Start+0x48>
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	08 95       	ret
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	08 95       	ret
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	08 95       	ret

00000168 <I2C_Stop>:
 168:	84 e9       	ldi	r24, 0x94	; 148
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 16e:	ec eb       	ldi	r30, 0xBC	; 188
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	84 fd       	sbrc	r24, 4
 176:	fd cf       	rjmp	.-6      	; 0x172 <I2C_Stop+0xa>
 178:	08 95       	ret

0000017a <I2C_Start_Wait>:
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	b8 2e       	mov	r11, r24
 18e:	cc eb       	ldi	r28, 0xBC	; 188
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	0f 2e       	mov	r0, r31
 194:	f4 ea       	ldi	r31, 0xA4	; 164
 196:	df 2e       	mov	r13, r31
 198:	f0 2d       	mov	r31, r0
 19a:	09 eb       	ldi	r16, 0xB9	; 185
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	0f 2e       	mov	r0, r31
 1a0:	fb eb       	ldi	r31, 0xBB	; 187
 1a2:	ef 2e       	mov	r14, r31
 1a4:	f1 2c       	mov	r15, r1
 1a6:	f0 2d       	mov	r31, r0
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f4 e8       	ldi	r31, 0x84	; 132
 1ac:	cf 2e       	mov	r12, r31
 1ae:	f0 2d       	mov	r31, r0
 1b0:	d8 82       	st	Y, r13
 1b2:	88 81       	ld	r24, Y
 1b4:	88 23       	and	r24, r24
 1b6:	ec f7       	brge	.-6      	; 0x1b2 <I2C_Start_Wait+0x38>
 1b8:	f8 01       	movw	r30, r16
 1ba:	80 81       	ld	r24, Z
 1bc:	88 7f       	andi	r24, 0xF8	; 248
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	b9 f7       	brne	.-18     	; 0x1b0 <I2C_Start_Wait+0x36>
 1c2:	f7 01       	movw	r30, r14
 1c4:	b0 82       	st	Z, r11
 1c6:	c8 82       	st	Y, r12
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	ec f7       	brge	.-6      	; 0x1c8 <I2C_Start_Wait+0x4e>
 1ce:	f8 01       	movw	r30, r16
 1d0:	80 81       	ld	r24, Z
 1d2:	88 7f       	andi	r24, 0xF8	; 248
 1d4:	88 31       	cpi	r24, 0x18	; 24
 1d6:	19 f0       	breq	.+6      	; 0x1de <I2C_Start_Wait+0x64>
 1d8:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Stop>
 1dc:	e9 cf       	rjmp	.-46     	; 0x1b0 <I2C_Start_Wait+0x36>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	bf 90       	pop	r11
 1f0:	08 95       	ret

000001f2 <I2C_Write>:
 1f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 1f6:	84 e8       	ldi	r24, 0x84	; 132
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <__EEPROM_REGION_LENGTH__>
 206:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	88 32       	cpi	r24, 0x28	; 40
 20e:	21 f0       	breq	.+8      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 210:	80 33       	cpi	r24, 0x30	; 48
 212:	21 f0       	breq	.+8      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	08 95       	ret
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret

00000220 <I2C_Read_Nack>:
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 226:	ec eb       	ldi	r30, 0xBC	; 188
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	88 23       	and	r24, r24
 22e:	ec f7       	brge	.-6      	; 0x22a <I2C_Read_Nack+0xa>
 230:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
