
UART_Clavier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000826  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071e  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000386  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000153  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9initUSARTv>:
		transmitByte(myString[i]);
		i++;
		
	}
	
}
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 61       	ori	r24, 0x18	; 24
  92:	80 83       	st	Z, r24
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <_Z12transmitByteh>:
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a8:	85 ff       	sbrs	r24, 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <_Z12transmitByteh+0x4>
  ac:	08 95       	ret

000000ae <main>:

int main(void)
{
	DDRD |= (1 << PD6);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8a b9       	out	0x0a, r24	; 10
	
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5));
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	80 7c       	andi	r24, 0xC0	; 192
  b8:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~(1 << PD1);
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	8a b9       	out	0x0a, r24	; 10
	PORTB |= ((1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5));
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8f 63       	ori	r24, 0x3F	; 63
  ca:	85 b9       	out	0x05, r24	; 5
	PORTC |= ((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	8f 60       	ori	r24, 0x0F	; 15
  d0:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PD1);
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8b b9       	out	0x0b, r24	; 11
	// -------- Inits --------- //
	
	initUSART();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <_Z9initUSARTv>
	char result = 0x58;
	while (1)
	{
		PORTD |= (1 << PD6); // Turn on the LED
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f e9       	ldi	r18, 0x9F	; 159
  e4:	86 e8       	ldi	r24, 0x86	; 134
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x3a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x44>
  f2:	00 00       	nop
		_delay_ms(500);
		PORTD &= ~(1 << PD6);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8f 7b       	andi	r24, 0xBF	; 191
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	2f e9       	ldi	r18, 0x9F	; 159
  fc:	86 e8       	ldi	r24, 0x86	; 134
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x52>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x5c>
 10a:	00 00       	nop
		_delay_ms(500);
		
		if (PINB & (1<<PB0))
 10c:	83 b1       	in	r24, 0x03	; 3
		{
			result = 0x33;
			
		}
		if (PINB & (1<<PB1))
 10e:	83 b1       	in	r24, 0x03	; 3
		{
			result = 0x36;
			
		}
		if (PINB & (1<<PB2))
 110:	83 b1       	in	r24, 0x03	; 3
		{
			result = 0x39;
			
		}
		if (PINB & (1<<PB3))
 112:	83 b1       	in	r24, 0x03	; 3
		{
			result = 0x23;
			
		}
		if (PINB & (1<<PB4))
 114:	83 b1       	in	r24, 0x03	; 3
		{
			result = 0x32;
			
		}
		if (PINB & (1<<PB5))
 116:	83 b1       	in	r24, 0x03	; 3
		{
			result = 0x35;
			
		}
		if (PINC & (1<<PC0))
 118:	86 b1       	in	r24, 0x06	; 6
		{
			result = 0x38;
			
		}
		if (PINC & (1<<PC1))
 11a:	86 b1       	in	r24, 0x06	; 6
		{
			result = 0x30;
			
		}
		if (PINC & (1<<PC2))
 11c:	86 b1       	in	r24, 0x06	; 6
		{
			result = 0x31;
			
		}
		if (PINC & (1<<PC3))
 11e:	86 b1       	in	r24, 0x06	; 6
		{
			result = 0x34;
			
		}
		if (PINC & (1<<PC4))
 120:	34 9b       	sbis	0x06, 4	; 6
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x7a>
		{
			result = 0x37;
 124:	87 e3       	ldi	r24, 0x37	; 55
 126:	01 c0       	rjmp	.+2      	; 0x12a <main+0x7c>
			
		}
		
		else
		{
			result = 0x58;
 128:	88 e5       	ldi	r24, 0x58	; 88
			
		}
		
		transmitByte(result);
 12a:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z12transmitByteh>
	PORTD |= (1 << PD1);
	// -------- Inits --------- //
	
	initUSART();
	char result = 0x58;
	while (1)
 12e:	d6 cf       	rjmp	.-84     	; 0xdc <main+0x2e>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
